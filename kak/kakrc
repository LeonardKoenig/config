# Enable plugin plugin :)
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# Enable support for C#
# c.f. rc/filetype/c-family.kak
hook global BufCreate .*[.](cs) %{
    set-option buffer filetype csharp
}

# Enable LSP support
plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{
    # uncomment to enable debugging
    #eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    #set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    hook global WinSetOption filetype=(rust|c|cpp|latex|context) %{
        lsp-enable-window
        lsp-auto-hover-enable
    }
}

# Referece
# * indentwidth: Number of *spaces* to insert
# * tabstop: Number of spaces a *tab* is rendered to be.

# Per-Buffer indendation fallbacks/defaults
hook global BufCreate .*[.](c|cpp) %{
    set-option buffer indentwidth 0
    set-option buffer tabstop 4
}
hook global BufCreate .*[.](tex|mkiv|mkii) %{
    set-option buffer indentwidth 2
}
hook global BufCreate (.*[.](.mk))|(Makefile) %{
  set-option buffer indentwidth 8
}

# Enable editorconfig support, possibly overriding defaults.
hook global WinCreate ^[^*]+$ %{editorconfig-load}

# Configure tab and backspace key behavior based on previous settings
plug "andreyorst/smarttab.kak" defer smarttab config %{
    hook global WinSetOption filetype=(.*) %{
        evaluate-commands %sh{
            if [ $kak_opt_indentwidth -ne 0 ]; then
                echo "expandtab"
                echo "set-option buffer softtabstop $kak_opt_indentwidth"
            elif [ $kak_opt_filetype = "gas" ] || [ $kak_opt_filetype = "nasm" ]
                echo "noexpandtab"
            else
                echo "smarttab"
            fi
        }
    }
}

hook global BufSetOption filetype=(latex|context) %{
    declare-option str documentsrc
    declare-option str documentdest

    declare-option str pdfviewer
    set-option buffer pdfviewer "okular"
    declare-option str pdfvieweropts
    set-option buffer pdfvieweropts "--unique"

    # printf ${kak_opt_pdfviewerfmt} $pdf $line $tex
    declare-option str pdfviewerfmt
    set-option buffer pdfviewerfmt "'%%s#src:%%d %%s'"

    # Search for `!TeX root` magic
    evaluate-commands %sh{
        buffer="$kak_buffile"
        magic=$(grep '^% !TeX root = ' "$buffer" | sed 's/.*= //' -)
        root=${magic:-$buffer}
        trunk=$(echo "$root" | sed 's/\.[^\.]*$//' - )

        echo "set-option buffer documentsrc ${root}"
        echo "set-option buffer documentdest ${trunk}.pdf"
    }

    declare-option str buildcmd
    set-option buffer buildcmd ':make<ret>:evaluate-commands -try-client %opt{jumpclient} %{nop}<ret>'
    map -docstring "build & view" global user , %opt{buildcmd}
    map -docstring "view" global user v ':pdf-view %opt{documentdest}%opt{documentsrc} <ret>'

    declare-option str workdir
    declare-option str mount
    evaluate-commands %sh{
        workdir=$(realpath .)
        echo "set-option buffer workdir ${workdir}"
        mount=$(findmnt -T ${workdir} -n -o TARGET)
        echo "set-option buffer mount ${mount}"
    }
    declare-option str podman
    set-option buffer podman "podman run -v %opt{mount}:%opt{mount} -w %opt{workdir}"
}

# LaTeXmk suppport
hook global BufSetOption filetype=(latex) %{
    declare-option str texlive
    set-option buffer texlive "texlive/texlive"
    set-option buffer makecmd "%opt{podman} %opt{texlive} latexmk -pvc -view=none %opt{documentsrc}"
}

hook global BufSetOption filetype=(context) %{
    declare-option str context
    set-option buffer context "contextgarden/context:current"
    set-option buffer makecmd "%opt{podman} %opt{context} context --paranoid --errors=list --nonstopmode %opt{documentsrc}"
}

# Use bear make wrapper.
hook global BufSetOption filetype=(c|cpp) %{
    set-option buffer makecmd "bear make"
}


define-command -params 2 pdf-view %{
    nop %sh{
        pdf="${1}"
        tex="${2}"
        line=${kak_cursor_line}
        args=$(printf "${kak_opt_pdfviewerfmt}" $pdf $line $tex)
        ${kak_opt_pdfviewer} ${kak_opt_pdfvieweropts} "$pdf#src:$line $tex" >/tmp/bar 2>&1 </dev/null &
#        echo ${kak_opt_pdfviewer} ${kak_opt_pdfvieweropts} ${args} >/tmp/foo
    }
}

require-module kitty
set-option global kitty_window_type os

# From wiki
def ide %{
    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

#    new rename-client docs
#    set global docsclient docs
}

# Highlight column
add-highlighter global/ column '%opt{autowrap_column}' default,red
set-face global Whitespace rgb:aaaaaa
add-highlighter global/ show-whitespaces
add-highlighter global/ number-lines -relative

try %{ source ./.kakrc }
